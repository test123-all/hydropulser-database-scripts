from rdflib import Namespace, Literal
from rdflib.namespace import DCMITYPE, DCTERMS, RDF, RDFS, XSD, SOSA, SSN, SDO
from pyKRAKEN.kraken import (
    DBO,
    QUDT,
    UNIT,
    QUANTITYKIND,
    SSN_SYSTEM,
    Kraken
)


# this should ideally be something like:
# https://fst.tu-darmstadt.de/namespaces/sensors/id/
# or w3id
# which redirects to
# https://fst.tu-darmstadt.de/namespaces/sensors/doc/
# which redirects to a webserver with static html generated by this, or just directly to
ns_root = "https://git.rwth-aachen.de/fst-tuda/projects/rdm/datasheets-mockup/"
FST = Namespace(ns_root + "-/blob/main/")
SENSOR = Namespace(FST["sensor/"])


data = Kraken()
data.g.bind("fst-sensor", SENSOR)

sensor_id = "1ed6c963-669f-62b7-8af6-3727686f020d"  # str(uuid6())
git_sha = ""

# the component = the air spring
sensor = SENSOR[sensor_id]
data.g.add((sensor, RDF.type, DCMITYPE.PhysicalObject))
data.g.add((sensor, RDF.type, SOSA.Sensor))
data.g.add((sensor, RDFS.label, Literal("PAA-33X/10bar")))
data.g.add((sensor, RDFS.comment, Literal("Drucksensor")))
data.g.add((sensor, DCTERMS.identifier, Literal(sensor_id)))
data.g.add((sensor, DCTERMS.identifier, Literal("fst-inv:D117")))
data.g.add((sensor, DBO.owner, Literal("FST")))
data.g.add((sensor, SDO.manufacturer, Literal("Keller")))
data.g.add((sensor, SDO.serialNumber, Literal("1011240")))
data.g.add((sensor, SDO.location, Literal("Sirup Mischanlage")))

# properties
sys_capa = SENSOR[sensor_id + "/SensorCapability"]
data.g.add((sensor, SSN_SYSTEM.hasSystemCapability, sys_capa))
data.g.add((sys_capa, RDF.type, SSN.Property))
data.g.add((sys_capa, RDF.type, SSN_SYSTEM.SystemCapability))
data.g.add((sys_capa, RDFS.label, Literal("sensor capabilities")))
data.g.add((sys_capa, RDFS.comment, Literal("sensor capabilities not regarding any conditions at this time")))

meas_range = SENSOR[sensor_id + "/MeasurementRange"]
data.g.add((sys_capa, SSN_SYSTEM.hasSystemProperty, meas_range))
data.g.add((meas_range, RDF.type, SSN.Property))
data.g.add((meas_range, RDF.type, SSN_SYSTEM.MeasurementRange))
data.g.add((meas_range, RDF.type, QUDT.Quantity))
data.g.add((meas_range, RDFS.label, Literal("measurement range")))
data.g.add((meas_range, RDFS.comment, Literal("absolute pressure")))
data.g.add((meas_range, QUDT.hasQuantityKind, QUANTITYKIND.Pressure))
data.g.add((meas_range, QUDT.unit, UNIT.BAR))
data.g.add((meas_range, SDO.minValue, Literal("0", datatype=XSD.integer)))
data.g.add((meas_range, SDO.maxValue, Literal("10", datatype=XSD.integer)))

sensitivity = SENSOR[sensor_id + "/Sensitivity"]
data.g.add((sys_capa, SSN_SYSTEM.hasSystemProperty, sensitivity))
data.g.add((sensitivity, RDF.type, SSN.Property))
data.g.add((sensitivity, RDF.type, SSN_SYSTEM.Sensitivity))
data.g.add((sensitivity, RDF.type, SDO.PropertyValue))
data.g.add((sensitivity, RDFS.label, Literal("sensitivity")))
data.g.add((sensitivity, SDO.name, Literal("gain")))
data.g.add((sensitivity, SDO.value, Literal("1", datatype=XSD.integer)))

bias = SENSOR[sensor_id + "/Bias"]
data.g.add((sys_capa, SSN_SYSTEM.hasSystemProperty, bias))
data.g.add((bias, RDF.type, SSN.Property))
data.g.add((bias, RDF.type, SSN_SYSTEM.SystemProperty))
data.g.add((bias, RDF.type, SDO.PropertyValue))
data.g.add((bias, RDFS.label, Literal("bias")))
data.g.add((bias, SDO.name, Literal("offset")))
data.g.add((bias, SDO.value, Literal("0", datatype=XSD.integer)))

# documentation
img = SENSOR[sensor_id + "/link-to-image.jpg"]
data.g.add((sensor, SDO.subjectOf, img))
data.g.add((sensor, SDO.image, img))

docs = SENSOR[sensor_id + "/link-to-doc-directory"]
data.g.add((sensor, SDO.subjectOf, docs))
data.g.add((sensor, SDO.documentation, docs))

datasheet = SENSOR[sensor_id + "/link-to-doc-directory/datasheet.pdf"]
data.g.add((sensor, SDO.subjectOf, datasheet))
data.g.add((sensor, SDO.documentation, datasheet))

path = "C:/Users/NP/Documents/AIMS/datasheets-mockup/sensor/" + sensor_id + "/"
print(data.g.serialize(destination=path + "rdf.json", format="json-ld", auto_compact=True))
print(data.g.serialize(destination=path + "rdf.ttl", base=SENSOR, format="longturtle"))
print(data.g.serialize(destination=path + "rdf.xml", base=SENSOR, format="xml"))
