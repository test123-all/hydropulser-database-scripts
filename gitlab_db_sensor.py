from rdflib import Namespace
from rdflib.namespace import RDF, FOAF
from pyKRAKEN.kraken import (
    UNIT,
    QUANTITYKIND,
    SSN_SYSTEM,
    Kraken,
    Sensor,
    SensorCapability,
    Property,
    Quantity
)


# this should ideally be something like:
# https://fst.tu-darmstadt.de/namespaces/sensors/id/
# or w3id
# which redirects to
# https://fst.tu-darmstadt.de/namespaces/sensors/doc/
# which redirects to a webserver with static html generated by this, or just directly to
ns_root = "https://git.rwth-aachen.de/fst-tuda/projects/rdm/datasheets-mockup/"
FST = Namespace(ns_root + "-/blob/main/")
SENSOR = Namespace(FST["sensor/"])


data = Kraken()
data.g.bind("fst-sensor", SENSOR)

sensor_id = "1ed6c963-669f-62b7-8af6-3727686f020d"  # str(uuid6())
git_sha = ""

# the sensor
sensor = Sensor(data, hasSensorCapability=SENSOR[sensor_id + "/SensorCapability"],
                iri=SENSOR[sensor_id], identifier=sensor_id, name="PAA-33X/10bar",
                comment="Drucksensor", owner="FST", manufacturer="Keller", serialNumber="1011240",
                location="Sirup Mischanlage")
sensor.identifier = "fst-inv:D117"

# properties
sys_capa = SensorCapability(data, iri=SENSOR[sensor_id + "/SensorCapability"], name="sensor capabilities",
                            comment="sensor capabilities not regarding any conditions at this time")

meas_range = Quantity(data, isPropertyOf=sys_capa.iri, hasQuantityKind=QUANTITYKIND.Pressure,
                      minValue=0, maxValue=10, unit=UNIT.BAR,
                      iri=SENSOR[sensor_id + "/MeasurementRange"], identifier=None, name="measurement range",
                      comment="absolute pressure", rdftype=SSN_SYSTEM.MeasurementRange)

sensitivity = Property(data, isPropertyOf=sys_capa.iri, iri=SENSOR[sensor_id + "/Sensitivity"],
                       comment="gain", rdftype=SSN_SYSTEM.Sensitivity, name="sensitivity", value=1)

bias = Property(data, isPropertyOf=sys_capa.iri, iri=SENSOR[sensor_id + "/Bias"],
                comment="offset", rdftype=SSN_SYSTEM.SystemProperty, name="bias", value=0)

# documentation
img = SENSOR[sensor_id + "/link-to-image.jpg"]
sensor.subjectOf = img
sensor.image = img

docs = SENSOR[sensor_id + "/link-to-doc-directory"]
sensor.subjectOf = docs
sensor.documentation = docs

datasheet = SENSOR[sensor_id + "/link-to-doc-directory/datasheet.pdf"]
sensor.subjectOf = datasheet
sensor.documentation = datasheet

# rdf doc references
docttl = SENSOR[sensor_id + "/rdf.ttl"]
data.g.add((docttl, RDF.type, FOAF.Document))  # schema:CreativeWork
data.g.add((docttl, FOAF.primaryTopic, sensor.iri))  # schema:about

docxml = SENSOR[sensor_id + "/rdf.xml"]
data.g.add((docxml, RDF.type, FOAF.Document))
data.g.add((docxml, FOAF.primaryTopic, sensor.iri))

docjson = SENSOR[sensor_id + "/rdf.json"]
data.g.add((docjson, RDF.type, FOAF.Document))
data.g.add((docjson, FOAF.primaryTopic, sensor.iri))

path = "C:/Users/Preuss/Documents/Git/AIMS/datasheets-mockup/sensor/" + sensor_id + "/"
print(data.g.serialize(destination=path + "rdf.json", format="json-ld", auto_compact=True))
print(data.g.serialize(destination=path + "rdf.ttl", base=SENSOR, format="longturtle"))
print(data.g.serialize(destination=path + "rdf.xml", base=SENSOR, format="xml"))
