from rdflib import Namespace, Literal
from rdflib.namespace import DCMITYPE, RDF, RDFS, XSD, SSN, SDO
from pyKRAKEN.kraken import (
    DBO,
    QUDT,
    UNIT,
    QUANTITYKIND,
    Kraken
)

# this should ideally be something like e.g.:
# https://fst.tu-darmstadt.de/namespaces/components/id/
# or w3id
# which redirects to e.g.
# https://fst.tu-darmstadt.de/namespaces/components/doc/
# which redirects to a webserver with static html generated by this, or just directly to
ns_root = "https://git.rwth-aachen.de/fst-tuda/projects/rdm/datasheets-mockup/"
FST = Namespace(ns_root + "-/blob/main/")
SUBSTANCE = Namespace(FST["substance/"])


data = Kraken()
data.g.bind("fst-substance", SUBSTANCE)

air_id = "1ed6cc2c-da26-661f-92f3-02c4bb63c743"

# a subcomponent = the air
air = SUBSTANCE[air_id]
data.g.add((air, RDF.type, DCMITYPE.PhysicalObject))
data.g.add((air, RDF.type, SDO.ChemicalSubstance))
data.g.add((air, RDFS.label, Literal("dry air")))
data.g.add((air, DBO.owner, Literal("FST")))
data.g.add((air, SDO.producer, Literal("environment")))

spec_gas_const = SUBSTANCE[air_id + "/R"]
data.g.add((air, SSN.hasProperty, spec_gas_const))
data.g.add((spec_gas_const, RDF.type, SSN.Property))
data.g.add((spec_gas_const, RDF.type, QUDT.Quantity))
data.g.add((spec_gas_const, RDFS.label, Literal("specific gas constant of air")))
data.g.add((spec_gas_const, QUDT.symbol, Literal("R")))
data.g.add((spec_gas_const, QUDT.hasQuantityKind, QUANTITYKIND.SpecificHeatCapacity))
data.g.add((spec_gas_const, QUDT.unit, UNIT["J-PER-KiloGM-K"]))
data.g.add((spec_gas_const, QUDT.value, Literal("287", datatype=XSD.double)))

therm_conduct = SUBSTANCE[air_id + "/lambda"]
data.g.add((air, SSN.hasProperty, therm_conduct))
data.g.add((therm_conduct, RDF.type, SSN.Property))
data.g.add((therm_conduct, RDF.type, QUDT.Quantity))
data.g.add((therm_conduct, RDFS.label, Literal("thermal conductivity gas")))
data.g.add((therm_conduct, QUDT.symbol, Literal("lambda")))
data.g.add((therm_conduct, QUDT.hasQuantityKind, QUANTITYKIND.ThermalConductivity))
data.g.add((therm_conduct, QUDT.unit, UNIT["W-PER-M-K"]))
data.g.add((therm_conduct, QUDT.value, Literal("0.027", datatype=XSD.double)))
# @ 1 bar abs, 303 K

isentropic_exp = SUBSTANCE[air_id + "/gamma"]
data.g.add((air, SSN.hasProperty, isentropic_exp))
data.g.add((isentropic_exp, RDF.type, SSN.Property))
data.g.add((isentropic_exp, RDF.type, QUDT.Quantity))
data.g.add((isentropic_exp, RDFS.label, Literal("isentropic exponent")))
data.g.add((isentropic_exp, QUDT.symbol, Literal("gamma")))
data.g.add((isentropic_exp, QUDT.hasQuantityKind, QUANTITYKIND.IsentropicExponent))
data.g.add((isentropic_exp, QUDT.unit, UNIT.UNITLESS))
data.g.add((isentropic_exp, QUDT.value, Literal("1.4", datatype=XSD.double)))
# @ 1 bar abs, 303 K

spec_heat_cap_const_p = SUBSTANCE[air_id + "/cp"]
data.g.add((air, SSN.hasProperty, spec_heat_cap_const_p))
data.g.add((spec_heat_cap_const_p, RDF.type, SSN.Property))
data.g.add((spec_heat_cap_const_p, RDF.type, QUDT.Quantity))
data.g.add((spec_heat_cap_const_p, RDFS.label, Literal("specific heat capacity at constant pressure")))
data.g.add((spec_heat_cap_const_p, QUDT.symbol, Literal("cp")))
data.g.add((spec_heat_cap_const_p, QUDT.hasQuantityKind, QUANTITYKIND.SpecificHeatCapacityAtConstantPressure))
data.g.add((spec_heat_cap_const_p, QUDT.unit, UNIT["J-PER-KiloGM-K"]))
data.g.add((spec_heat_cap_const_p, QUDT.value, Literal("1060", datatype=XSD.double)))
# @ 1 bar abs, 303 K

spec_heat_cap_const_v = SUBSTANCE[air_id + "/cv"]
data.g.add((air, SSN.hasProperty, spec_heat_cap_const_v))
data.g.add((spec_heat_cap_const_v, RDF.type, SSN.Property))
data.g.add((spec_heat_cap_const_v, RDF.type, QUDT.Quantity))
data.g.add((spec_heat_cap_const_v, RDFS.label, Literal("specific heat capacity at constant volume")))
data.g.add((spec_heat_cap_const_v, QUDT.symbol, Literal("cv")))
data.g.add((spec_heat_cap_const_v, QUDT.hasQuantityKind, QUANTITYKIND.SpecificHeatCapacityAtConstantVolume))
data.g.add((spec_heat_cap_const_v, QUDT.unit, UNIT["J-PER-KiloGM-K"]))
data.g.add((spec_heat_cap_const_v, QUDT.value, Literal("740", datatype=XSD.double)))
# @ 1 bar abs, 303 K

path = "C:/Users/NP/Documents/AIMS/datasheets-mockup/substance/" + air_id + "/"
print(data.g.serialize(destination=path + "rdf.json", format="json-ld", auto_compact=True))
print(data.g.serialize(destination=path + "rdf.ttl", base=SUBSTANCE, format="longturtle"))
print(data.g.serialize(destination=path + "rdf.xml", base=SUBSTANCE, format="xml"))
